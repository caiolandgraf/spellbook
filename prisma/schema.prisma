// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?   @unique
  bio           String?
  website       String?
  github        String?
  twitter       String?
  isPublic      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  spellbooks Spellbook[]
  spells     Spell[]
  favorites  Favorite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Spellbook {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  spells Spell[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Spell {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String
  language    String
  isPublic    Boolean  @default(true)
  tags        String[]
  views       Int      @default(0)
  executions  Int      @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  spellbookId String?
  spellbook   Spellbook? @relation(fields: [spellbookId], references: [id], onDelete: SetNull)

  favorites Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([spellbookId])
  @@index([language])
}

model Favorite {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  spellId String
  spell   Spell  @relation(fields: [spellId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, spellId])
  @@index([userId])
  @@index([spellId])
}
