exports.id=31210,exports.ids=[31210],exports.modules={31210:()=>{!function(a){function b(a){return RegExp("(\\()(?:"+a+")(?=[\\s\\)])")}function c(a){return RegExp("([\\s([])(?:"+a+")(?=[\\s)])")}var d="(?!\\d)[-+*/~!@$%^=<>{}\\w]+",e="(\\()",f="(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*",g={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+d+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+d),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+d),alias:"property"},splice:{pattern:RegExp(",@?"+d),alias:["symbol","variable"]},keyword:[{pattern:RegExp("(\\()(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)(?=\\s)"),lookbehind:!0},{pattern:RegExp("(\\()(?:append|by|collect|concat|do|finally|for|in|return)(?=\\s)"),lookbehind:!0}],declare:{pattern:b("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:b("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:c("nil|t"),lookbehind:!0},number:{pattern:c("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp("(\\()def(?:const|custom|group|var)\\s+"+d),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(d)}},defun:{pattern:RegExp("(\\()(?:cl-)?(?:defmacro|defun\\*?)\\s+"+d+"\\s+\\("+f+"\\)"),lookbehind:!0,greedy:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+d),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp("(\\()lambda\\s+\\(\\s*(?:&?"+d+"(?:\\s+&?"+d+")*\\s*)?\\)"),lookbehind:!0,greedy:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(e+d),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},h={"lisp-marker":RegExp("&(?!\\d)[-+*/~!@$%^=<>{}\\w]+"),varform:{pattern:RegExp("\\("+d+"\\s+(?=\\S)"+f+"\\)"),inside:g},argument:{pattern:RegExp("(^|[\\s(])"+d),lookbehind:!0,alias:"variable"},rest:g},i="\\S+(?:\\s+\\S+)*",j={pattern:RegExp(e+f+"(?=\\))"),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:body|rest)\\s+"+i),inside:h},"other-marker-vars":{pattern:RegExp("&(?:aux|optional)\\s+"+i),inside:h},keys:{pattern:RegExp("&key\\s+"+i+"(?:\\s+&allow-other-keys)?"),inside:h},argument:{pattern:RegExp(d),alias:"variable"},punctuation:/[()]/}};g.lambda.inside.arguments=j,g.defun.inside.arguments=a.util.clone(j),g.defun.inside.arguments.inside.sublist=j,a.languages.lisp=g,a.languages.elisp=g,a.languages.emacs=g,a.languages["emacs-lisp"]=g}(Prism)}};