exports.id=77468,exports.ids=[77468],exports.modules={77468:()=>{!function(a){function b(a){return RegExp(/(\()/.source+"(?:"+a+")"+/(?=[\s\)])/.source)}function c(a){return RegExp(/([\s([])/.source+"(?:"+a+")"+/(?=[\s)])/.source)}var d=/(?!\d)[-+*/~!@$%^=<>{}\w]+/.source,e="&"+d,f="(\\()",g="(?=\\s)",h=/(?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\))*\))*\))*/.source,i={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+d+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+d),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+d),alias:"property"},splice:{pattern:RegExp(",@?"+d),alias:["symbol","variable"]},keyword:[{pattern:RegExp(f+"(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)"+g),lookbehind:!0},{pattern:RegExp(f+"(?:append|by|collect|concat|do|finally|for|in|return)"+g),lookbehind:!0}],declare:{pattern:b(/declare/.source),lookbehind:!0,alias:"keyword"},interactive:{pattern:b(/interactive/.source),lookbehind:!0,alias:"keyword"},boolean:{pattern:c(/nil|t/.source),lookbehind:!0},number:{pattern:c(/[-+]?\d+(?:\.\d*)?/.source),lookbehind:!0},defvar:{pattern:RegExp(f+"def(?:const|custom|group|var)\\s+"+d),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(d)}},defun:{pattern:RegExp(f+/(?:cl-)?(?:defmacro|defun\*?)\s+/.source+d+/\s+\(/.source+h+/\)/.source),lookbehind:!0,greedy:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+d),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(f+"lambda\\s+\\(\\s*(?:&?"+d+"(?:\\s+&?"+d+")*\\s*)?\\)"),lookbehind:!0,greedy:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(f+d),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},j={"lisp-marker":RegExp(e),varform:{pattern:RegExp(/\(/.source+d+/\s+(?=\S)/.source+h+/\)/.source),inside:i},argument:{pattern:RegExp(/(^|[\s(])/.source+d),lookbehind:!0,alias:"variable"},rest:i},k="\\S+(?:\\s+\\S+)*",l={pattern:RegExp(f+h+"(?=\\))"),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:body|rest)\\s+"+k),inside:j},"other-marker-vars":{pattern:RegExp("&(?:aux|optional)\\s+"+k),inside:j},keys:{pattern:RegExp("&key\\s+"+k+"(?:\\s+&allow-other-keys)?"),inside:j},argument:{pattern:RegExp(d),alias:"variable"},punctuation:/[()]/}};i.lambda.inside.arguments=l,i.defun.inside.arguments=a.util.clone(l),i.defun.inside.arguments.inside.sublist=l,a.languages.lisp=i,a.languages.elisp=i,a.languages.emacs=i,a.languages["emacs-lisp"]=i}(Prism)}};